name: Pipelines
run-name: Drift Detection
on:
  workflow_call:
    inputs:
      # This field can be overriden to customize the runner used for pipelines
      # workflows.
      #
      # IMPORTANT: To use self-hosted runners this workflow must be hosted in
      # the same GitHub organization as your infra-live repository.
      # See https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-self-hosted-runners
      #
      # The value must be an escaped JSON string that will be decoded to the
      # jobs.runs-on field
      # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
      #
      # For example:
      # - A simple github runner: "\"ubuntu-22.04\""
      # - A list of labels: "[\"self-hosted\", \"linux\"]"
      # - A map: "{group: \"ubuntu-runners\", labels: \"ubuntu-20.04-16core\"}"
      runner:
        type: string
        default: '"ubuntu-latest"'
    secrets:
        PIPELINES_READ_TOKEN:
          required: true
        INFRA_ROOT_WRITE_TOKEN:
          required: true
env:
  PIPELINES_CLI_VERSION: v0.28.0
  PIPELINES_ACTIONS_VERSION: main

jobs:
  determine_units:
    name: Detect Infrastructure Drift
    runs-on: ${{ fromJSON(inputs.runner) }}
    outputs:
      units: ${{ steps.determine-units.outputs.units }}
    steps:
      - name: Checkout Pipelines Actions
        uses: actions/checkout@v4
        with:
          path: pipelines-actions
          repository: gruntwork-io/pipelines-actions
          ref: ${{ env.PIPELINES_ACTIONS_VERSION }}
          token: ${{ secrets.PIPELINES_READ_TOKEN }}

      - name: Check out repo code
        uses: actions/checkout@v4
        with:
          path: infra-live-repo
          fetch-depth: 0

      - name: Determine Units
        id: determine-units
        uses: ./pipelines-actions/.github/actions/pipelines-drift-detection-determine-units

  pipelines_drift_detection:
    runs-on: ${{ fromJSON(inputs.runner) }}
    needs: determine_units
    strategy:
      fail-fast: false
      matrix:
        unit: ${{ fromJSON(needs.determine_units.outputs.units) }}
    env:
      JOB_NAME: Detect Drift in ${{ matrix.unit.path }}
    name: Detect Drift in ${{ matrix.unit.path }}
    steps:
      - name: Checkout Pipelines Actions
        uses: actions/checkout@v4
        with:
          path: pipelines-actions
          repository: gruntwork-io/pipelines-actions
          ref: 2024-08-15_drift_detection_determine_drift
          token: ${{ secrets.PIPELINES_READ_TOKEN }}

      - name: Check out repo code
        uses: actions/checkout@v4
        with:
          path: infra-live-repo
          fetch-depth: 0

      - name: Execute Drift Detection
        id: determine-drift
        uses: ./pipelines-actions/.github/actions/pipelines-drift-detection-determine-drift
        with:
          UNIT_ID: ${{ matrix.unit.id }}
          UNIT_PATH: ${{ matrix.unit.path }}
          PIPELINES_READ_TOKEN: ${{ secrets.PIPELINES_READ_TOKEN }}
          JOB_NAME: ${{ env.JOB_NAME }}
          STEP_NAME: "Execute Drift Detection"

  consolidate_jobs:
    runs-on: ${{ fromJSON(inputs.runner) }}
    needs: pipelines_drift_detection
    steps:
      - name: Checkout Pipelines Actions
        uses: actions/checkout@v4
        with:
          path: pipelines-actions
          repository: gruntwork-io/pipelines-actions
          ref: ${{ env.PIPELINES_ACTIONS_VERSION }}
          token: ${{ secrets.PIPELINES_READ_TOKEN }}

      - name: Check out repo code
        uses: actions/checkout@v4
        with:
          path: infra-live-repo
          fetch-depth: 0

      - name: Install Pipelines CLI
        uses: ./pipelines-actions/.github/actions/pipelines-install
        with:
          version: ${{ env.PIPELINES_CLI_VERSION }}
          token: ${{ secrets.PIPELINES_READ_TOKEN }}

      - name: "Download results"
        uses: actions/download-artifact@v4
        with:
          pattern: result-*
          path: results
          merge-multiple: true

      - name: "Extract results"
        id: extract-results
        shell: bash
        run: |
          ls -R results
          drifted_paths=()
          error_paths=()
          error_urls=()
          error_excerpts=()
          for result in results/*.json; do
            path=$(jq -r '.path' "$result")
            has_error=$(jq -r '.error' "$result")
            logs_url=$(jq -r '.logs_url' "$result")
            error_excerpt=$(jq -r '.error_excerpt' "$result")
            if [ "$has_error" = "true" ]; then
              # Add the path to the array of error paths
              error_paths+=("$path")
              error_urls+=("$logs_url")
              error_excerpts+=("$error_excerpt")
            else
              drifted_paths+=("$path")
              # Extract the 'drift' value
              drift=$(jq -r '.drift' "$result")
              # Append the drift to the .drift-history.json file at the specified path
              echo "$drift" | jq -c '. | fromjson' >> "./infra-live-repo/$path/.drift-history.json"
            fi
          done

          drifted_paths_markdown=""
          if [ ${#drifted_paths[@]} -ne 0 ]; then
            drifted_paths_markdown+="## ${#drifted_paths[@]} Drifted Units\n"
            for path in "${drifted_paths[@]}"; do
              drifted_paths_markdown+="- <code>$path</code>\n\n"
            done
            drifted_paths_markdown+="\n"

            drifted_paths_markdown+="1. Gruntwork Pipelines will automatically run a <code>plan</code> showing all changes needed to resolve the drift.\n"
            branch_link="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/tree/drift-detection"
            drifted_paths_markdown+="1. Optionally push commits to [this branch]($branch_link) to bring your IaC into alignment with currently deployed resources.\n"
            drifted_paths_markdown+="3. Merge this pull request to <code>apply</code> the changes and resolve the drift.\n"

            echo "drifted_paths_markdown=$drifted_paths_markdown" >> "$GITHUB_OUTPUT"
          fi

          errored_paths_markdown=""
          if [ ${#error_paths[@]} -ne 0 ]; then
            errored_paths_markdown+="## :warning: ${#error_paths[@]} Unscanned Units\n"
            errored_paths_markdown+="Drift detection was not performed for these units because the plans failed:\n"
            for i in "${!error_paths[@]}"; do
              path="${error_paths[$i]}"
              logs_url="${error_urls[$i]}"
              error_excerpt="${error_excerpts[$i]}"
              errored_paths_markdown+="<details><summary><code>$path</code></summary>\n\n"
              errored_paths_markdown+="\`\`\`\n"
              errored_paths_markdown+=${error_excerpt//$'\n'/\\n}
              errored_paths_markdown+="\n"
              errored_paths_markdown+="\`\`\`\n"
              errored_paths_markdown+="[View logs]($logs_url)\n"
              errored_paths_markdown+="</details>\n"
            done
            echo "errored_paths_markdown=$errored_paths_markdown" >> "$GITHUB_OUTPUT"
          fi

      - name: "Create PR"
        id: propose-infra-change
        working-directory: ./infra-live-repo
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.INFRA_ROOT_WRITE_TOKEN }}
          WORKING_DIRECTORY: .
          BRANCH_NAME: "drift-detection"
          AUTHOR_NAME: ${{ github.actor }}
          AUTHOR_EMAIL: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com
          DRIFTED_PATHS_MARKDOWN: ${{ steps.extract-results.outputs.drifted_paths_markdown }}
          ERRORED_PATHS_MARKDOWN: ${{ steps.extract-results.outputs.errored_paths_markdown }}
        run: |
          git_changes=$(git status --porcelain)
          if [[ -n $git_changes ]]; then
            logs_url="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            body="# :left_right_arrow: Drift Detected\n"
            body+="This pull request remediates [detected drift]($logs_url) between IaC in this repository and cloud resources in AWS.\n"
            body+="\n"
            body+="$DRIFTED_PATHS_MARKDOWN\n"
            body+="$ERRORED_PATHS_MARKDOWN\n"
            escaped_body=$(echo -e "$body")

            pipelines scm propose-infra-change \
              --working-directory "$WORKING_DIRECTORY" \
              --change-request-branch-name "$BRANCH_NAME" \
              --commit-message "Drift Detected" \
              --title "Drift Detected" \
              --body "$escaped_body" \
              --author-name "$AUTHOR_NAME" \
              --author-email "$AUTHOR_EMAIL" \
              --force true
          fi

      - name: "Show Pull Request URL in Summary"
        shell: bash
        if: ${{ steps.propose-infra-change.outputs.pipelines_change_request_url }}
        env:
          PR_URL: ${{ steps.propose-infra-change.outputs.pipelines_change_request_url }}
        run: |
          echo "### ↔️ Drift Detected" >> "$GITHUB_STEP_SUMMARY"
          echo "[Link to Drift Remediation Pull Request]($PR_URL)" >> "$GITHUB_STEP_SUMMARY"
